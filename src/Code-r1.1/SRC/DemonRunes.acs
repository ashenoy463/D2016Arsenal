#library "DemonRunes"
#include "zcommon.acs"

World Int 1: arrayHealth[];
World Int 2: arrayArmor[];
World Str 3: arrayArmorClass[];

Script "D4BaronRune" (VOID)
{
	arrayHealth[PlayerNumber()] = GetActorProperty(0, APROP_HEALTH);
	arrayArmor[PlayerNumber()] = CheckInventory("BasicArmor");
	arrayArmorClass[PlayerNumber()] = GetArmorInfo(ARMORINFO_CLASSNAME);
	//Log(s:"Health= ", i: arrayHealth[PlayerNumber()]);
	//Log(s:"Armor#= ", i: arrayArmor[PlayerNumber()]);
	//Log(s:"ArmorClass= ", s: arrayArmorClass[PlayerNumber()]);
	
	GiveInventory("RuneBaron", 1);
	GiveInventory("MorphedToken", 1);
	
	While (CheckActorClass(PlayerNumber(), "NewBaronPlayer"))
	{
			Delay(5);
	}
	
	SetActorProperty(PlayerNumber(), APROP_HEALTH, arrayHealth[PlayerNumber()]);
	//Log(s:"Returned Health= ", i:GetActorProperty(PlayerNumber(), APROP_HEALTH));
	
	if (arrayArmorClass[PlayerNumber()] != "None")
	{
		GiveInventory(arrayArmorClass[PlayerNumber()], 1);
		//Log(s:"Returned ArmorClass= ", s:GetArmorInfo(ARMORINFO_CLASSNAME));
		//Log(s:"Returned InitialArmor#= ", i:CheckInventory("BasicArmor"));
		
		if (CheckInventory("BasicArmor") > arrayArmor[PlayerNumber()])
		{
			While(CheckInventory("BasicArmor") > arrayArmor[PlayerNumber()])
			{
				TakeInventory("BasicArmor",1);
			}
		}
		else if (CheckInventory("BasicArmor") < arrayArmor[PlayerNumber()])
		{
			While (CheckInventory("BasicArmor") < arrayArmor[PlayerNumber()])
			{
				GiveInventory("GiveArmor",1);
			}
		}
	}
	TakeInventory("MorphedToken", 1);
	TakeInventory("CeaseMorph", 1);
	Delay(2);
}

Script "D4RevenantRune" (VOID)
{
	arrayHealth[PlayerNumber()] = GetActorProperty(0, APROP_HEALTH);
	arrayArmor[PlayerNumber()] = CheckInventory("BasicArmor");
	arrayArmorClass[PlayerNumber()] = GetArmorInfo(ARMORINFO_CLASSNAME);
	//Log(s:"Health= ", i: arrayHealth[PlayerNumber()]);
	//Log(s:"Armor#= ", i: arrayArmor[PlayerNumber()]);
	//Log(s:"ArmorClass= ", s: arrayArmorClass[PlayerNumber()]);
	
	GiveInventory("RuneRevenant", 1);
	GiveInventory("MorphedToken", 1);
	
	While (CheckActorClass(PlayerNumber(), "NewRevenantPlayer"))
	{
			Delay(5);
	}
	
	SetActorProperty(PlayerNumber(), APROP_HEALTH, arrayHealth[PlayerNumber()]);
	//Log(s:"Returned Health= ", i:GetActorProperty(PlayerNumber(), APROP_HEALTH));
	
	if (arrayArmorClass[PlayerNumber()] != "None")
	{
		GiveInventory(arrayArmorClass[PlayerNumber()], 1);
		//Log(s:"Returned ArmorClass= ", s:GetArmorInfo(ARMORINFO_CLASSNAME));
		//Log(s:"Returned InitialArmor#= ", i:CheckInventory("BasicArmor"));
		
		if (CheckInventory("BasicArmor") > arrayArmor[PlayerNumber()])
		{
			While(CheckInventory("BasicArmor") > arrayArmor[PlayerNumber()])
			{
				TakeInventory("BasicArmor",1);
			}
		}
		else if (CheckInventory("BasicArmor") < arrayArmor[PlayerNumber()])
		{
			While (CheckInventory("BasicArmor") < arrayArmor[PlayerNumber()])
			{
				GiveInventory("GiveArmor",1);
			}
		}
	}
	TakeInventory("MorphedToken", 1);
	TakeInventory("CeaseMorph", 1);
		
	SetWeapon("Melee_Attacks");
	Delay(35);
	TakeInventory("NewRevenantHUD", 1);
}

Script "MorphedLevelChange" Enter
{
	If (CheckInventory("MorphedToken") >= 1)
	{
		SetActorProperty(PlayerNumber(), APROP_HEALTH, arrayHealth[PlayerNumber()]);
		//Log(s:"Returned Health= ", i:GetActorProperty(PlayerNumber(), APROP_HEALTH));
		
		if (arrayArmorClass[PlayerNumber()] != "None")
		{
			GiveInventory(arrayArmorClass[PlayerNumber()], 1);
			//Log(s:"Returned ArmorClass= ", s:GetArmorInfo(ARMORINFO_CLASSNAME));
			//Log(s:"Returned InitialArmor#= ", i:CheckInventory("BasicArmor"));
			
			if (CheckInventory("BasicArmor") > arrayArmor[PlayerNumber()])
			{
				While(CheckInventory("BasicArmor") > arrayArmor[PlayerNumber()])
				{
					TakeInventory("BasicArmor",1);
				}
			}
			else if (CheckInventory("BasicArmor") < arrayArmor[PlayerNumber()])
			{
				While (CheckInventory("BasicArmor") < arrayArmor[PlayerNumber()])
				{
					GiveInventory("GiveArmor",1);
				}
			}
		}
		TakeInventory("MorphedToken", 1);
		TakeInventory("CeaseMorph", 1);
		Delay(2);
	}
}